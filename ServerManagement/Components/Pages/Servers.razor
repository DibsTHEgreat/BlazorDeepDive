@page "/servers"

@*Potential Location to specifiy render component.*@


@inject NavigationManager NavigationManager

@*What makes a component a routable component? The single most important thing is the page directive at the top.*@

<h3>Servers</h3>
<br />
<br />

<div class="container-fluid text-center">
	<div class="row">
		@foreach(var city in cities)
		{
			<div class="col">
				<div class="card">
					<img src="@($"/images/{city}.png")" class="card-img-top" alt="...">
					<div class="card-body">
						<button type="button" class="btn btn-primary">@city</button>
					</div>
				</div>
			</div>
		}
	</div>
</div>

<br />

@*
	This is called a interactive location, there are many locations as to where you can manually set the interactivity.
	Generally speaking, there are 2 main locations for interactivity locations. 
		1. Setting the rendermode on the component, or in its parent component or inside the component. Generally, all this 
		three of these options fall under one category: Setting the rendermode either on/in a reusable component or on a page component.
		2. The second type of location is at the global level.
*@
<ServerComponent @rendermode="InteractiveServer"></ServerComponent>


<ul>
	@foreach(var server in servers)
	{
		<li>
			@server.Name in @server.City is 
			<span style="color:@(server.IsOnline ? "green" : "red")">
				@(server.IsOnline ? "online" : "offline")
			</span>;
			&nbsp;
			<a href="/servers/@server.ServerId" class="btn btn-link">Edit</a>
			&nbsp;

			<EditForm
			Model="server"
			FormName="@($"form-server-{server.ServerId}")"
			OnValidSubmit="@(() => { DeleteServer(server.ServerId); })">
				<button type="submit" class="btn btn-primary">Delete</button>
			</EditForm>
		</li>
	}
</ul>

<p>
	<a href="/servers/add" class="btn btn-primary">Add Server</a>
</p>

@code {
	private List<Server> servers = ServersRepository.GetServersByCity("Toronto");

	private List<String> cities = CitiesRepository.GetCities();

	private void DeleteServer(int serverId)
	{
		if (serverId > 0)
		{
			ServersRepository.DeleteServer(serverId);
			NavigationManager.NavigateTo("/servers");
		}
	}
	
}