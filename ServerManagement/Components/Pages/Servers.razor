@page "/servers"

@*Potential Location to specifiy render component.*@
@rendermode InteractiveServer

@inject NavigationManager NavigationManager

@*What makes a component a routable component? The single most important thing is the page directive at the top.*@

<h3>Servers</h3>
<br />
<br />

<div class="container-fluid text-center">
	<div class="row">
		@foreach(var city in cities)
		{
			<div class="col">
				<div class="card @(selectedCity.Equals(city, StringComparison.OrdinalIgnoreCase)?"border-primary":"")">
					<img src="@($"/images/{city}.png")" class="card-img-top" alt="...">
					<div class="card-body">
						<button type="button" class="btn btn-primary" @onclick="@(() => { SelectCity(city); })">@city</button>
					</div>
				</div>
			</div>
		}
	</div>
</div>

<br />

@* 
	Pay close attention to how we bind the value in this input: bind-value has a lower-case v, whereas on
	the EditForm, bind-Value has a captial V.
	Blazor is using onChange events behind the scene to allow View-State to be binded.
	@bind-value:event="oninput" allows the setter to be triggered for any input, allowing for results to change depending
	on input as it is being typed out.
*@
<div class="input-group mb-3">
	<input type="text" class="form-control" placeholder="Search Servers" @bind-value="serverFilter" @bind-value:event="oninput" />
	<button class="btn btn-outline-secondary" type="button" id="button-search" @onclick="HandleSearch">Search</button>
</div>

<br />

@*
	This is called a interactive location, there are many locations as to where you can manually set the interactivity.
	Generally speaking, there are 2 main locations for interactivity locations. 
		1. Setting the rendermode on the component, or in its parent component or inside the component. Generally, all this 
		three of these options fall under one category: Setting the rendermode either on/in a reusable component or on a page component.
		2. The second type of location is at the global level.
*@
@* <ServerComponent @rendermode="InteractiveServer"></ServerComponent> *@


<ul>
	@foreach(var server in servers)
	{
		<li>
			@server.Name in @server.City is 
			<span style="color:@(server.IsOnline ? "green" : "red")">
				@(server.IsOnline ? "online" : "offline")
			</span>;
			&nbsp;
			<a href="/servers/@server.ServerId" class="btn btn-link">Edit</a>
			&nbsp;

			<EditForm
			Model="server"
			FormName="@($"form-server-{server.ServerId}")"
			OnValidSubmit="@(() => { DeleteServer(server.ServerId); })">
				<button type="submit" class="btn btn-primary">Delete</button>
			</EditForm>
		</li>
	}
</ul>

<p>
	<a href="/servers/add" class="btn btn-primary">Add Server</a>
</p>

@code {
	private List<Server> servers = ServersRepository.GetServersByCity("Toronto");

	private List<String> cities = CitiesRepository.GetCities();

	private string _serverFilter = "";

	private string serverFilter { get=>_serverFilter; 
		set {
			_serverFilter = value;
			this.servers = ServersRepository.SearchServers(_serverFilter);
		} 
	}

	@* In order to change a state variable, first we must declare a state variable. *@
	private string selectedCity = "Toronto";

	private void DeleteServer(int serverId)
	{
		if (serverId > 0)
		{
			ServersRepository.DeleteServer(serverId);
			NavigationManager.NavigateTo("/servers");
		}
	}

	private void SelectCity(string cityName)
	{
		this.selectedCity = cityName;

		this.servers = ServersRepository.GetServersByCity(this.selectedCity);
	}

	@* Pay attention to how we used the handling for this function. Blazor actually passes parameters into the function. *@
	// private void HandleServerFilterChange(ChangeEventArgs args)
	// {
	// 	serverFilter = args.Value?.ToString() ?? string.Empty;
	// }

	private void HandleSearch()
	{
		this.servers = ServersRepository.SearchServers(serverFilter);

		this.selectedCity = string.Empty;
	}

}