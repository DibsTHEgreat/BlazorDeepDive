@page "/servers/{Id:int}"
@*
  We don't want to instantiate a object from a class within another class. We want to inject that into our class
  because we don't want to have a dependency. This specific piece of component doesn't need to know the definition
  of this class, and it doesn't need to manage the life span of this object either. 
  Basically, we avoid the potential of memory leaks, hence why we use dependency injection.
*@
@inject NavigationManager NavigationManager

<h3>Edit Server</h3>
<br />
<br />

@if (server != null)
{
	<EditForm Model="server" FormName="formServer" OnValidSubmit="Submit">
		<DataAnnotationsValidator></DataAnnotationsValidator>
		<ValidationSummary></ValidationSummary>

		<InputNumber @bind-Value="server.ServerId" hidden></InputNumber>

		<FieldComponent Label="Name">
			<Control>
				<InputText @bind-Value="server.Name" class="form-control"></InputText>
			</Control>
			<ValidationControl>
				<ValidationMessage For="() => server.Name"></ValidationMessage>
			</ValidationControl>
		</FieldComponent>

		<FieldComponent Label="City">
			<Control>
				<InputText @bind-Value="server.City" class="form-control"></InputText>
			</Control>
			<ValidationControl>
				<ValidationMessage For="() => server.City"></ValidationMessage>
			</ValidationControl>
		</FieldComponent>

		<FieldComponent Label="Online">
			<Control>
				<InputCheckbox @bind-Value="server.IsOnline" class="form-check-input"></InputCheckbox>
			</Control>
			<ValidationControl>
				<ValidationMessage For="() => server.IsOnline"></ValidationMessage>
			</ValidationControl>
		</FieldComponent>
		<br />

		<button class="btn btn-primary" type="submit">Update</button>
		&nbsp;
		<a href="/servers" class="btn btn-primary">Close</a>

	</EditForm>
}

@code {
	@*This is a root parameter*@
	[Parameter]
	public int Id { get; set; }

	@*In order to recieve data from the form we utilize a property and use attribute SupplyParameterFromForm*@
	[SupplyParameterFromForm]
	private Server? server { get; set; }

	@*LifeCycle that is triggered when the component receives the parameter value from the URL *@
	protected override void OnParametersSet()
	{
		server ??= ServersRepository.GetServerById(this.Id);
	}

	private void Submit()
	{
		if (server != null)
		{
			ServersRepository.UpdateServer(server.ServerId, server);
		}

		NavigationManager.NavigateTo("/servers");
	}
}
